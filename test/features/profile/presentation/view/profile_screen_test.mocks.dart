// Mocks generated by Mockito 5.4.4 from annotations
// in tarcking_app/test/features/profile/presentation/view/profile_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:tarcking_app/core/errors/api_result.dart' as _i7;
import 'package:tarcking_app/features/auth/domain/usecases/logout_usecase/logout_usecase.dart'
as _i2;
import 'package:tarcking_app/features/localization/localization_controller/localization_cubit.dart'
as _i12;
import 'package:tarcking_app/features/localization/localization_controller/localization_state.dart'
as _i4;
import 'package:tarcking_app/features/logout/viewmodel/logout_states.dart'
as _i3;
import 'package:tarcking_app/features/logout/viewmodel/logout_viewmodel.dart'
as _i10;
import 'package:tarcking_app/features/profile/domain/entity/user_entity.dart'
as _i8;
import 'package:tarcking_app/features/profile/domain/usecases/get_profile_data_usecase.dart'
as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogoutUseCase_0 extends _i1.SmartFake implements _i2.LogoutUseCase {
  _FakeLogoutUseCase_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLogoutStates_1 extends _i1.SmartFake implements _i3.LogoutStates {
  _FakeLogoutStates_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLocalizationState_2 extends _i1.SmartFake
    implements _i4.LocalizationState {
  _FakeLocalizationState_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetProfileDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProfileDataUseCase extends _i1.Mock
    implements _i5.GetProfileDataUseCase {
  MockGetProfileDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i7.ApiResult<_i8.UserEntity>> call() =>
      (super.noSuchMethod(
        Invocation.method(#call, []),
        returnValue: _i6.Future<_i7.ApiResult<_i8.UserEntity>>.value(
          _i9.dummyValue<_i7.ApiResult<_i8.UserEntity>>(
            this,
            Invocation.method(#call, []),
          ),
        ),
      )
      as _i6.Future<_i7.ApiResult<_i8.UserEntity>>);
}

/// A class which mocks [LogoutViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutViewModel extends _i1.Mock implements _i10.LogoutViewModel {
  MockLogoutViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LogoutUseCase get logoutUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#logoutUseCase),
        returnValue: _FakeLogoutUseCase_0(
          this,
          Invocation.getter(#logoutUseCase),
        ),
      )
      as _i2.LogoutUseCase);

  @override
  _i3.LogoutStates get state =>
      (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLogoutStates_1(this, Invocation.getter(#state)),
      )
      as _i3.LogoutStates);

  @override
  _i6.Stream<_i3.LogoutStates> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.LogoutStates>.empty(),
      )
      as _i6.Stream<_i3.LogoutStates>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
      as bool);

  @override
  _i6.Future<void> logout() =>
      (super.noSuchMethod(
        Invocation.method(#logout, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      )
      as _i6.Future<void>);

  @override
  void emit(_i3.LogoutStates? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i11.Change<_i3.LogoutStates>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      )
      as _i6.Future<void>);
}

/// A class which mocks [LocalizationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationCubit extends _i1.Mock implements _i12.LocalizationCubit {
  MockLocalizationCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get language =>
      (super.noSuchMethod(
        Invocation.getter(#language),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#language),
        ),
      )
      as String);

  @override
  set language(String? _language) => super.noSuchMethod(
    Invocation.setter(#language, _language),
    returnValueForMissingStub: null,
  );

  @override
  String get selectedLanguage =>
      (super.noSuchMethod(
        Invocation.getter(#selectedLanguage),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#selectedLanguage),
        ),
      )
      as String);

  @override
  set selectedLanguage(String? _selectedLanguage) => super.noSuchMethod(
    Invocation.setter(#selectedLanguage, _selectedLanguage),
    returnValueForMissingStub: null,
  );

  @override
  _i4.LocalizationState get state =>
      (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLocalizationState_2(
          this,
          Invocation.getter(#state),
        ),
      )
      as _i4.LocalizationState);

  @override
  _i6.Stream<_i4.LocalizationState> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i4.LocalizationState>.empty(),
      )
      as _i6.Stream<_i4.LocalizationState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
      as bool);

  @override
  void selectLanguage(String? lang) => super.noSuchMethod(
    Invocation.method(#selectLanguage, [lang]),
    returnValueForMissingStub: null,
  );

  @override
  bool isSelected(String? lang) =>
      (super.noSuchMethod(
        Invocation.method(#isSelected, [lang]),
        returnValue: false,
      )
      as bool);

  @override
  void emit(_i4.LocalizationState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i11.Change<_i4.LocalizationState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      )
      as _i6.Future<void>);
}