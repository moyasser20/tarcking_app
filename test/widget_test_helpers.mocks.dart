// Mocks generated by Mockito 5.4.5 from annotations
// in tarcking_app/test/widget_test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/src/widgets/navigator.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:tarcking_app/core/api/client/api_client.dart' as _i6;
import 'package:tarcking_app/features/auth/data/models/forget_password_models/forget_password_request.dart'
    as _i7;
import 'package:tarcking_app/features/auth/data/models/forget_password_models/reset_password_request_model.dart'
    as _i10;
import 'package:tarcking_app/features/auth/data/models/forget_password_models/verify_code_request_model.dart'
    as _i9;
import 'package:tarcking_app/features/auth/domain/responses/auth_response.dart'
    as _i2;
import 'package:tarcking_app/features/auth/domain/usecases/forget_password_usecase.dart'
    as _i3;
import 'package:tarcking_app/features/auth/domain/usecases/verify_code_usecase.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthResponse_0<T> extends _i1.SmartFake
    implements _i2.AuthResponse<T> {
  _FakeAuthResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ForgetPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgetPasswordUseCase extends _i1.Mock
    implements _i3.ForgetPasswordUseCase {
  MockForgetPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AuthResponse<String>> call(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#call, [email]),
            returnValue: _i4.Future<_i2.AuthResponse<String>>.value(
              _FakeAuthResponse_0<String>(
                this,
                Invocation.method(#call, [email]),
              ),
            ),
          )
          as _i4.Future<_i2.AuthResponse<String>>);
}

/// A class which mocks [VerifyCodeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyCodeUseCase extends _i1.Mock implements _i5.VerifyCodeUseCase {
  MockVerifyCodeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AuthResponse<String>> call(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#call, [code]),
            returnValue: _i4.Future<_i2.AuthResponse<String>>.value(
              _FakeAuthResponse_0<String>(
                this,
                Invocation.method(#call, [code]),
              ),
            ),
          )
          as _i4.Future<_i2.AuthResponse<String>>);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i6.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> forgetPassword(
    _i7.ForgetPasswordRequestModel? forgetPasswordRequestModel,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#forgetPassword, [forgetPasswordRequestModel]),
            returnValue: _i4.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#forgetPassword, [
                  forgetPasswordRequestModel,
                ]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<String> verifyResetCode(
    _i9.VerifyCodeRequestModel? verifyResetCode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#verifyResetCode, [verifyResetCode]),
            returnValue: _i4.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#verifyResetCode, [verifyResetCode]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<String> resetPassword(
    _i10.ResetPasswordRequestModel? resetPasswordRequestModel,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#resetPassword, [resetPasswordRequestModel]),
            returnValue: _i4.Future<String>.value(
              _i8.dummyValue<String>(
                this,
                Invocation.method(#resetPassword, [resetPasswordRequestModel]),
              ),
            ),
          )
          as _i4.Future<String>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i11.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
    _i11.Route<dynamic>? route,
    _i11.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didPush, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didPop(_i11.Route<dynamic>? route, _i11.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
        Invocation.method(#didPop, [route, previousRoute]),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i11.Route<dynamic>? route,
    _i11.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didRemove, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didReplace({
    _i11.Route<dynamic>? newRoute,
    _i11.Route<dynamic>? oldRoute,
  }) => super.noSuchMethod(
    Invocation.method(#didReplace, [], {
      #newRoute: newRoute,
      #oldRoute: oldRoute,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void didChangeTop(
    _i11.Route<dynamic>? topRoute,
    _i11.Route<dynamic>? previousTopRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didChangeTop, [topRoute, previousTopRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStartUserGesture(
    _i11.Route<dynamic>? route,
    _i11.Route<dynamic>? previousRoute,
  ) => super.noSuchMethod(
    Invocation.method(#didStartUserGesture, [route, previousRoute]),
    returnValueForMissingStub: null,
  );

  @override
  void didStopUserGesture() => super.noSuchMethod(
    Invocation.method(#didStopUserGesture, []),
    returnValueForMissingStub: null,
  );
}
